name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🔧 Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        cache-read-only: false
      
    - name: 🏗️ Build Project
      run: ./gradlew build -x test
      
    - name: 🧪 Run Spock Tests
      run: ./gradlew test
      
    - name: 📊 Generate Test Report
      if: always()
      run: ./gradlew jacocoTestReport
      
    - name: 🎭 Run FitNesse Tests
      run: |
        ./gradlew fitnesseTest || true
        echo "FitNesse tests completed (failures allowed for now)"
        
    - name: 📦 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          build/reports/tests/
          build/reports/jacoco/
          build/test-results/
          src/test/fitnesse/FitNesseRoot/files/testResults/
        retention-days: 7

    - name: 📝 Test Summary
      if: always()
      run: |
        echo "## 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Spock Test Results
        if [ -f build/test-results/test/TEST-*.xml ]; then
          echo "### Spock Tests" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests completed - Check artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Coverage Summary
        if [ -f build/reports/jacoco/test/jacocoTestReport.xml ]; then
          echo "### Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "📊 JaCoCo coverage report generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # FitNesse Results
        echo "### FitNesse Tests" >> $GITHUB_STEP_SUMMARY
        echo "🎭 FitNesse tests executed - Check artifacts for results" >> $GITHUB_STEP_SUMMARY

  deploy-reports:
    name: 📚 Deploy Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📥 Download Test Artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./reports
        
    - name: 📋 Setup Pages
      uses: actions/configure-pages@v4
      
    - name: 🗂️ Prepare Pages Content
      run: |
        mkdir -p pages
        
        # Copy test reports
        if [ -d "./reports" ]; then
          cp -r ./reports/* pages/
        fi
        
        # Create index.html
        cat > pages/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="de">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>FitNesse & Spock Tutorial - Test Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; border-bottom: 3px solid #007acc; padding-bottom: 10px; }
                h2 { color: #555; margin-top: 30px; }
                .report-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }
                .report-card { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007acc; }
                .report-card h3 { margin-top: 0; color: #333; }
                .report-card a { color: #007acc; text-decoration: none; font-weight: bold; }
                .report-card a:hover { text-decoration: underline; }
                .badge { display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
                .badge.spock { background: #28a745; color: white; }
                .badge.fitnesse { background: #17a2b8; color: white; }
                .badge.coverage { background: #ffc107; color: black; }
                .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; text-align: center; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🧪 FitNesse & Spock Tutorial - Test Reports</h1>
                
                <p>Willkommen zu den automatisch generierten Test-Reports für das FitNesse & Spock Tutorial Projekt.</p>
                
                <div class="report-grid">
                    <div class="report-card">
                        <h3><span class="badge spock">SPOCK</span> Unit Tests</h3>
                        <p>Groovy-basierte BDD Tests für Unit- und Integration-Testing</p>
                        <a href="./reports/tests/test/index.html">📊 Spock Test Report</a>
                    </div>
                    
                    <div class="report-card">
                        <h3><span class="badge coverage">COVERAGE</span> Code Coverage</h3>
                        <p>JaCoCo Code Coverage Report mit detaillierter Analyse</p>
                        <a href="./reports/jacoco/test/html/index.html">📈 Coverage Report</a>
                    </div>
                    
                    <div class="report-card">
                        <h3><span class="badge fitnesse">FITNESSE</span> Acceptance Tests</h3>
                        <p>Wiki-basierte Acceptance Tests für Business-Logic</p>
                        <a href="./testResults/">🎭 FitNesse Results</a>
                    </div>
                </div>
                
                <h2>📋 Über das Projekt</h2>
                <p>Dieses Tutorial demonstriert die professionelle Integration von zwei Test-Frameworks:</p>
                <ul>
                    <li><strong>Spock Framework:</strong> Entwickler-orientierte BDD Tests mit Groovy</li>
                    <li><strong>FitNesse:</strong> Business-lesbare Acceptance Tests</li>
                </ul>
                
                <div class="footer">
                    <p>🚀 Automatisch generiert durch GitHub Actions CI/CD Pipeline</p>
                </div>
            </div>
        </body>
        </html>
        EOF
        
    - name: 📤 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./pages
        
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4